\ProvidesPackage{prop}
\def\base@name{prop}

\newif\if@prop@enumerate\@prop@enumeratefalse
\newif\if@prop@ntheorem\@prop@ntheoremfalse
\newif\if@prop@noconfig\@prop@noconfigfalse
\newif\if@prop@amsthm\@prop@amsthmfalse
\newif\if@prop@standard\@prop@standardfalse
\newif\if@prop@hyperref\@prop@hyperreffalse
\DeclareOption{enumerate}{\@prop@enumeratetrue}
\DeclareOption{ntheorem}{\@prop@ntheoremtrue}
\DeclareOption{noconfig}{\@prop@noconfigtrue}
\DeclareOption{amsthm}{\@prop@amsthmtrue}
\DeclareOption{standard}{\@prop@standardtrue}
\DeclareOption{hyperref}{\@prop@hyperreftrue}

%% pass rest of options to ntheorem.sty
\if@prop@ntheorem
  \DeclareOption*{\PassOptionsToPackage{\CurrentOption}{ntheorem}}
\fi

\ProcessOptions\relax

%% Require packages

%% ntheorem
\if@prop@ntheorem
  \if@prop@noconfig{\PassOptionsToPackage{noconfig}{ntheorem}}\fi
  \if@prop@amsthm{
    \PassOptionsToPackage{amsthm}{ntheorem}
    \if@prop@standard
    % Do not pass `standard' option to ntheorem
    % Instead, define standard theorems except `proof' later
    \fi
  }\else{
    \if@prop@standard{\PassOptionsToPackage{standard}{ntheorem}}\fi
  }\fi
  \RequirePackage{ntheorem}
\else\if@prop@amsthm
  \RequirePackage{amsthm}
\fi\fi

\let\prop@newtheorem=\newtheorem

%% enumerate
\if@prop@enumerate
  \RequirePackage{enumerate}
\else
  \let\prop@enumerate\enumerate
  \RequirePackage{enumerate}
  \let\enumerate\prop@enumerate % use the original one
\fi

%% subcommand
\RequirePackage{subcommand}

%% hyperref
\if@prop@hyperref
  \RequirePackage{hyperref}
\fi


%% Definitions *************************************************

%% Patches for \newtheorem *************

%% \deftheorem    defines new theorem if it is undefined
%% \deftheorem!   defines new theorem and overrides if it is already defined
%% \deftheorem*   the same as \deftheorem but use \newtheorem*
%% \deftheorem!*  the same as \deftheorem! but use \newtheorem*
\gdef\deftheorem@fake#1{\@ifnextchar[%]
  {\deftheorem@fake@sibling{#1}}{\deftheorem@fake@i{#1}}}
\gdef\deftheorem@fake@sibling#1[#2]#3{}
\gdef\deftheorem@fake@i#1#2{\@ifnextchar[%]
  {\deftheorem@fake@child{#1}{#2}}{\deftheorem@fake@i@i{#1}{#2}}}
\gdef\deftheorem@fake@child#1#2[#3]{}
\gdef\deftheorem@fake@i@i#1#2{}
\gdef\deftheorem@i{%
  \@ifnextchar*{\deftheorem@i@star}{\deftheorem@i@nostar}}
\gdef\deftheorem@force@i!{%
  \@ifnextchar*{\deftheorem@force@i@star}{\deftheorem@force@i@nostar}}
\gdef\deftheorem@i@star*#1{%
  \expandafter\@ifundefined{#1}%
  {\prop@newtheorem*{#1}}%
  {\PackageWarning{\base@name}%
    {deftheorem: theorem keyword `#1' is already defined}\deftheorem@fake{#1}}}
\gdef\deftheorem@i@nostar#1{%
  \expandafter\@ifundefined{#1}%
  {\prop@newtheorem{#1}}%
  {\PackageWarning{\base@name}%
    {deftheorem: theorem keyword `#1' is already defined}\deftheorem@fake{#1}}}
\gdef\deftheorem@force@i@star*#1{%
  \expandafter\@ifundefined{#1}%
  {\prop@newtheorem*{#1}}{\renewtheorem*{#1}}}
\gdef\deftheorem@force@i@nostar#1{%
  \expandafter\@ifundefined{#1}{\prop@newtheorem{#1}}{\renewtheorem{#1}}}
\gdef\deftheorem{\@ifnextchar!{\deftheorem@force@i}{\deftheorem@i}}

%% Internal definitions ****************

%% extract NAME from NAME=VALUE
\gdef\@prop@opt@name#1=#2,{#1}
\gdef\prop@opt@name#1{\expandafter\@prop@opt@name#1=,}

%% extract VALUE from NAME=VALUE
\gdef\@prop@opt@value#1=#2,{#2\@gobbletwo}
\gdef\prop@opt@value#1{\expandafter\@prop@opt@value#1,=,\@empty\@empty}
\edef\prop@opt@none{none}

%% define \prop@o@NAME for option named NAME
\gdef\prop@opt@parse#1{%
  \@for\@opt:=#1\do{%
    \edef\@opt@name{\prop@opt@name{\@opt}}%
    \def\@opt@value{\prop@opt@value{\@opt}}%
    \expandafter\protected@edef\csname prop@o@\@opt@name\endcsname%
    {\@opt@value}}}
\gdef\prop@opt@parse@name#1{%
  \let\@has@opt=\relax%
  \@for\@opt:=#1\do{%
    \ifx\@has@opt\@empty\edef\@has@opt{x}\fi%
    \ifx\@has@opt\relax\let\@has@opt=\@empty\fi}%
  \ifx\@has@opt\@empty%
  \prop@opt@parse@name@#1==\@empty\@empty%
  \else%
  \prop@opt@parse{#1}%
  \fi}
\gdef\prop@opt@parse@name@#1=#2={%
  \def\@tmp{#2}%
  \ifx\@tmp\@empty%
  \edef\prop@o@name{#1}%
  \else%
  \prop@opt@parse{#1=#2}%
  \fi\@gobbletwo}

%% define and retrieve default option values
\gdef\prop@opt@def#1#2#3{%
  \expandafter\@ifundefined{prop@#1@o@#2}{%
    \expandafter\protected@xdef\csname prop@#1@o@#2\endcsname{#3}}{}}
\gdef\prop@opt@get#1#2{\csname prop@#1@o@#2\endcsname}

%% Pass environment body as an argument of macro (cf. environ.sty)
\long\gdef\prop@collect@body#1{%
  \let\@ef=\expandafter%
  \gdef\prop@envbody{\expandafter#1\expandafter{\prop@envbody}}%
  \@ef\@ef\@ef\def\@ef\@ef\@ef\prop@process@envbody\@ef\@ef\@ef{%
    \@ef\prop@envbody\@ef\end\@ef{\@currenvir}}%
  \gdef\prop@envbody{}%
  \def\prop@begin@stack{b}%
  \begingroup%
  \@ef\let\csname\@currenvir\endcsname\prop@@collect@body%
  \edef\prop@process@envbody{%
    \expandafter\noexpand\csname\@currenvir\endcsname}%
  \prop@process@envbody}
\long\gdef\prop@push@begins#1\begin#2{%
  \ifx\end#2\else%
    b\expandafter\prop@push@begins%
  \fi}
\long\gdef\prop@addto@envbody#1{%
  \expandafter\gdef\expandafter\prop@envbody\expandafter{\prop@envbody#1}}%
\long\gdef\prop@@collect@body#1\end#2{%
  \edef\prop@begin@stack{%
    \prop@push@begins#1\begin\end\expandafter\@gobble\prop@begin@stack}%
  \ifx\@empty\prop@begin@stack%
    \endgroup%
    \@checkend{#2}%
    \prop@addto@envbody{#1}%
  \else%
    \prop@addto@envbody{#1\end{#2}}%
  \fi%
  \prop@process@envbody}

%% Make new label
\gdef\prop@label{\@ifnextchar[%]
  {\@prop@label@}{\@prop@label}}
\def\@prop@label#1{\@bsphack%
  \protected@write\@auxout{}%
  {\expandafter\string%
    \if@prop@hyperref%
     \newlabel{#1}{{\@currentlabel}{\thepage}{\@currentlabelname}{\@currentHref}}%
    \else%
     \newlabel{#1}{{\@currentlabel}{\thepage}}%
    \fi}%
  \@esphack}
\def\@prop@label@[#1]#2{\@bsphack%
  \protected@write\@auxout{}%
  {\expandafter\string%
    \if@prop@hyperref%
     \prop@newlabel{#2}{{\@currentlabel}{\thepage}{\@currentlabelname}{\@currentHref}}[#1]%
    \else%
     \prop@newlabel{#2}{{\@currentlabel}{\thepage}}[#1]%
    \fi}%
  \@esphack}
\gdef\prop@newlabel{\prop@newl@bel r}
\gdef\prop@newl@bel#1#2#3{%
  \@ifundefined{#1@#2}%
    \relax%
    {\gdef \@multiplelabels {%
        \@latex@warning@no@line{There were multiply-defined labels}}%
      \@latex@warning@no@line{Label `#2' multiply defined}}%
    \global\@namedef{#1@#2}{#3}%
    \@ifnextchar[{\prop@set@label@type{#1}{#2}}%]
    \relax}%
\@onlypreamble\prop@newl@bel
\gdef\prop@set@label@type#1#2[#3]{\global\@namedef{#1@#2@type}{#3}}
\let\prop@enddocument=\enddocument
\gdef\enddocument{%
  \let\prop@newl@bel=\@testdef%
  \prop@enddocument}

%% Define \prop:COMMAND ****************

\gdef\prop{\@prop}

%% Constants
\gdef\prop@constant@setter#1#2[#3]{%
  \subcommand\prop[:set:#1]##1{%
    \expandafter\protected@edef\csname prop@c@#2\endcsname{##1}}%
  \expandafter\protected@edef\csname prop@c@#2\endcsname{#3}}
\prop@constant@setter{env-theorem}{theorem}[lemma]
\prop@constant@setter{env-proof}{proof}[proof]
\prop@constant@setter{env-enumerate}{enumerate}[enumerate]
\prop@constant@setter{env-enumerate-style}{enumerate@style}[(1)]
\prop@constant@setter{ref-space}{ref@space}[~]
\prop@constant@setter{ref-comma}{ref@comma}[, ]
\prop@constant@setter{ref-and}{ref@and}[{} and ]

%% Labels
\subcommand\prop[:label]#1{\@ifnextchar[%]
  {\prop@new@label{#1}}{\@prop@new@label{#1}}}
\gdef\prop@new@label#1[#2]#3{%
  \expandafter\protected@edef\csname prop@l@#1@singular\endcsname{#3}%
  \expandafter\protected@edef\csname prop@l@#1@plural\endcsname{#2}}
\gdef\@prop@new@label#1#2{\prop@new@label{#1}[#2]{#2}}
\prop:label{theorem}[Theorems]{Theorem}
\prop:label{lemma}[Lemmas]{Lemma}
\prop:label{proposition}[Propositions]{Proposition}
\prop:label{corollary}[Corollaries]{Corollary}
\prop:label{example}[Examples]{Example}
\prop:label{remark}[Remarks]{Remark}
\prop:label{definition}[Definitions]{Definition}
\prop:label{proof}[Proofs]{Proof}
\prop:label{statement}{}

%% \prop:use[OPTIONS]{ID}
%% [OPTIONS]
%%   name=NAME
%%   label=none|LABEL
%%   type=TYPE
%%   proof=none|PROOF
%%   prooflabel=none|LABEL
%%   prooftype=TYPE
\subcommand\prop[:use]{\@ifnextchar[%]
  {\prop@use}{\prop@use[]}}
\gdef\prop@use[#1]#2{\bgroup%
  \edef\prop@o@type{\prop@opt@get{#2}{type}}%
  \protected@edef\prop@o@name{\prop@opt@get{#2}{name}}%
  \edef\prop@o@label{\prop@opt@get{#2}{label}}
  \edef\prop@o@proof{\prop@opt@get{#2}{proof}}%
  \prop@opt@parse{#1}%
  \edef\prop@o@prooftype{\prop@opt@get{#2[\prop@o@proof]}{type}}%
  \edef\prop@o@prooflabel{\prop@opt@get{#2[\prop@o@proof]}{label}}%
  \prop@opt@parse{#1}%
  \edef\prop@id{#2}%
  \prop@def@stat%
  \ifx\prop@o@name\@empty%
  \begin{\prop@o@type}%
    \ifx\prop@o@label\prop@opt@none\else%
      \prop@label[\prop@o@type]{\prop@o@label}\fi%
    \@nameuse{prop@#2@prop}%
  \end{\prop@o@type}%
  \else%
  \begin{\prop@o@type}[\prop@o@name]%
    \ifx\prop@o@label\prop@opt@none\else%
      \prop@label[\prop@o@type]{\prop@o@label}\fi%
    \@nameuse{prop@#2@prop}%
  \end{\prop@o@type}%
  \fi%
  \ifx\prop@o@proof\prop@opt@none\else%
  \prop@use@proof%
  [name=\prop@o@proof,label=\prop@o@prooflabel,type=\prop@o@prooftype]{#2}%
  \fi\egroup}

%% \prop:use:proof[NAME|OPTIONS]{ID}
%%
%% [OPTIONS]
%%   name=NAME
%%   label=none|LABEL
%%   type=TYPE
\subcommand\prop[:use:proof]{\@ifnextchar[%]
  {\prop@use@proof}{\prop@use@proof[]}}
\gdef\prop@use@proof[#1]#2{\bgroup%
  \def\prop@o@name{\prop@opt@get{#2}{proof}}%
  \def\prop@o@type{\prop@opt@get{#2}{prooftype}}%
  \edef\prop@o@label{\prop@opt@get{#2}{prooflabel}}%
  \prop@opt@parse@name{#1}%
  \def\prop@o@type{\prop@opt@get{#2[\prop@o@name]}{type}}%
  \edef\prop@o@label{\prop@opt@get{#2[\prop@o@name]}{label}}%
  \prop@opt@parse@name{#1}%
  \edef\prop@id{#2}%
  \prop@def@stat%
  \begin{\prop@o@type}%
    \ifx\prop@o@label\prop@opt@none\else%
      \prop@label[\prop@o@type]{\prop@o@label}\fi%
    \@nameuse{prop@#2@proof[\prop@o@name]}%
  \end{\prop@o@type}%
  \egroup}

%% \prop:ref{ID(STATEMENT),...,(STATEMENT),...}
%% \prop:ref(STATEMENT)
\subcommand\prop[:ref]{\@ifnextchar(%)
  {\prop@ref@stat}{\prop@ref}}
\gdef\prop@ref#1{\bgroup%
  % configurable constants
  \protected@edef\@sp{\prop@c@ref@space}%
  \protected@edef\@comm{\prop@c@ref@comma}%
  \protected@edef\@and{\prop@c@ref@and}%
  % internal macros
  \def\@eatws##1{##1}%
  \def\prop@ref@thm##1(##2)##3,{##1}%
  \def\prop@ref@sta##1(##2)##3,{##2}%
  % constants
  \edef\@none{none}%
  \edef\@singular{singular}%
  \edef\@plural{plural}%
  % counters and variables
  \@tempcntb=\z@%
  \count@=\z@%
  \let\@thm@last=\@empty%
  \let\@sta@last=\@empty%
  % gather information
  \@for\@tmp:=#1\do{%
    \edef\@@ref{\expandafter\@eatws\@tmp}%
    \edef\@thm{\expandafter\prop@ref@thm\@@ref(),}%
    \edef\@sta{\expandafter\prop@ref@sta\@@ref(),}%
    \let\@thm@type=\@none
    \let\@sta@type=\@none
    \expandafter\let\csname @thm@label\the\count@\endcsname=\@none%
    \expandafter\let\csname @sta@label\the\count@\endcsname=\@none%
    % theorem
    \ifx\@thm\@empty\else%
      \expandafter\let\csname @thm@label\the\count@\endcsname=\@singular%
      \edef\@thm@type{\prop@get@type{\@thm}}%
    \fi%
    \ifx\@thm@last\@thm@type%
      \expandafter\ifx\csname @thm@label\the\@tempcntb\endcsname\@singular%
        \expandafter\let\csname @thm@label\the\@tempcntb\endcsname=\@plural%
      \fi%
      \expandafter\let\csname @thm@label\the\count@\endcsname=\@none%
    \fi%
    \let\@thm@last=\@thm@type%
    % statement
    \ifx\@sta\@empty\else%
      \expandafter\let\csname @sta@label\the\count@\endcsname=\@singular%
      \ifx\@thm\@empty%
        \edef\@sta@type{statement}%
        \@ifundefined{prop@id}{%
          \PackageError{\base@name}{%
            \string\prop:ref{\@@ref} must be used inside %
            \string\begin{prop} ... \string\end{prop}}\@ehc}{}%
        \edef\@sta{\prop@id(\@sta)}%
      \else%
        \edef\@sta{\@thm(\@sta)}%
      \fi%
      \edef\@sta@style{\prop@get@type{\@sta}}%
    \fi%
    \ifx\@sta@last\@sta@type%
      \ifx\@sta\@empty\else
        \expandafter\ifx\csname @sta\the\@tempcntb\endcsname\@empty\else%
          \expandafter\ifx\csname @thm\the\@tempcntb\endcsname\@thm
            \edef\@thm{}\fi\fi\fi%
      \expandafter\ifx\csname @sta@label\the\@tempcntb\endcsname\@singular%
        \expandafter\let\csname @sta@label\the\@tempcntb\endcsname=\@plural%
      \fi%
      \expandafter\let\csname @sta@label\the\count@\endcsname=\@none%
    \fi%
    \let\@sta@last=\@sta@type%
    %
    \expandafter\let\csname @thm\the\count@\endcsname=\@thm%
    \expandafter\let\csname @sta\the\count@\endcsname=\@sta%
    \expandafter\let\csname @thm@type\the\count@\endcsname=\@thm@type%
    \expandafter\let\csname @sta@type\the\count@\endcsname=\@sta@type%
    \expandafter\let\csname @sta@style\the\count@\endcsname=\@sta@style%
    \@tempcntb=\count@%
    \advance\count@\@ne}%
  % show reference
  \@tempcnta=\count@%
  \count@=\z@%
  \@whilenum\count@<\@tempcnta\do{%
    % theorem
    \prop@make@ref@label{@thm\the\count@}%
    {\csname @thm@type\the\count@\endcsname}%
    {\csname @thm@label\the\count@\endcsname}%
    \expandafter\ifx\csname @thm\the\count@\endcsname\@empty\else%
    \ref{prop:\csname @thm\the\count@\endcsname}%
    \expandafter\ifx\csname @sta\the\count@\endcsname\@empty\else%
    \prop@c@ref@space\fi\fi%
    % statement
    \prop@make@ref@label{@sta\the\count@}%
    {\csname @sta@type\the\count@\endcsname}%
    {\csname @sta@label\the\count@\endcsname}%
    \expandafter\ifx\csname @sta\the\count@\endcsname\@empty\else%
      \expandafter\ifx\csname @sta@style\the\count@\endcsname\@none%
        \ref{prop:\csname @sta\the\count@\endcsname}%
      \else%
        \prop@make@ref@sta{\ref{prop:\csname @sta\the\count@\endcsname}}%
        {\csname @sta@style\the\count@\endcsname}%
      \fi\fi%
    % `,' or ` and '
    \advance\count@\@ne%
    \ifnum\@tempcnta>1\ifnum\count@<\@tempcnta%
      \ifnum\count@=\@tempcntb\prop@c@ref@and\else\prop@c@ref@comma\fi%
    \fi\fi%
  }\egroup}
\gdef\prop@ref@stat(#1){\prop@ref{(#1)}}
\gdef\prop@get@type#1{%
  \@ifundefined{r@prop:#1@type}{none}{\csname r@prop:#1@type\endcsname}}
\gdef\prop@make@ref@label#1#2#3{% id, type, sing/plu
  \expandafter\@ifundefined{#1}{}{%
    \expandafter\ifx#2\@none\else\expandafter\@ifundefined{prop@l@#2@#3}{}{%
      \edef\@label{\csname prop@l@#2@#3\endcsname}%
      \ifx\@label\@empty\else\@label\prop@c@ref@space\fi}\fi}}
\gdef\prop@make@ref@sta#1#2{% label, style
  \def\@enumctr{dummy}\def\thedummy{#1}%
  \@enLab{}\edef\@sta@style{#2}%
  \expandafter\@enloop\@sta@style\@enum@\the\@enLab}

%% Environment *************************

%% \begin{prop}[OPTIONS]{ID}
%%   ...
%% \proof
%%   ...
%% \proof[PROOF]
%%   ...
%% \proof[name=PROOF,type=TYPE,label=LABEL]
%%   ...
%% \end{prop}
%%
%% [OPTIONS]
%%   def
%%   name=NAME
%%   type=TYPE
%%   label=none|LABEL
%%   proof=none|PROOF
%%   prooftype=TYPE
%%   prooflabel=none|LABEL
\gdef\endprop{}
\gdef\@prop{\@ifnextchar[%]
  {\@@prop}{\@@prop[]}}
\gdef\@@prop[#1]#2{%
  \let\prop@o@def=\relax%
  \def\prop@o@name{}%
  \edef\prop@o@type{\prop@c@theorem}%
  \edef\prop@o@proof{default}%
  \edef\prop@o@prooftype{\prop@c@proof}%
  \prop@opt@parse{#1}%
  \prop@opt@def{#2}{name}{\prop@o@name}%
  \prop@opt@def{#2}{type}{\prop@o@type}%
  \prop@opt@def{#2}{label}{prop:#2}%
  \prop@opt@def{#2}{proof}{\prop@o@proof}%
  \prop@opt@def{#2}{prooftype}{\prop@o@prooftype}%
  \prop@opt@def{#2}{prooflabel}{proof:#2}%
  \edef\prop@id{#2}%
  \prop@collect@body\@@@prop}
\long\gdef\@@@prop#1{%
  \let\prop@proof@defined=\relax%
  \let\prop@proof@used=\relax%
  \expandafter\prop@statement#1\proof\relax\prop@proofend%
  \ifx\prop@o@def\relax
    \ifx\prop@proof@defined\relax%
      \expandafter\@ifundefined{prop@\prop@id @proof[\prop@o@proof]}{%
        \let\prop@proof@used=\@empty}{}\fi
    \ifx\prop@proof@used\relax%
      \prop@use[]{\prop@id}%
    \else%
      \prop@use[proof=none]{\prop@id}\fi\fi}
\long\gdef\prop@statement#1\proof#2\prop@proofend{%
  \global\@namedef{prop@\prop@id @prop}{#1}%
  \prop@proof#2\proof\relax\prop@proofend}
\gdef\prop@proof{\@ifnextchar[%]
  {\@prop@proof}{\@prop@proof[]}}
\long\gdef\@prop@proof[#1]#2\proof#3\prop@proofend{%
  \long\def\@ifrel@x##1##2\else{\ifx##1\relax\else}%
  \@ifrel@x#2\else%
  \let\prop@proof@defined=\@empty%
  \bgroup%
  \edef\prop@o@name{\prop@opt@get{\prop@id}{proof}}%
  \edef\prop@o@type{\prop@opt@get{\prop@id}{prooftype}}%
  \prop@opt@parse@name{#1}%
  \edef\prop@o@label{\prop@opt@get{\prop@id}{prooflabel}[\prop@o@name]}%
  \prop@opt@parse@name{#1}%
  \prop@opt@def{\prop@id[\prop@o@name]}{type}{\prop@o@type}%
  \prop@opt@def{\prop@id[\prop@o@name]}{label}{\prop@o@label}%
  \global\@namedef{prop@\prop@id @proof[\prop@o@name]}{#2}%
  \egroup%
  \prop@proof#3\proof\relax\prop@proofend%
  \fi}

%% \begin{prop:def}[OPTIONS]{ID}
%%   ...
%% \proof
%%   ...
%% \proof[PROOF]
%%   ...
%% \proof[name=PROOF,type=TYPE,label=LABEL]
%%   ...
%% \end{prop:def}
%%
%% [OPTIONS]
%%   name=NAME
%%   type=TYPE
%%   label=none|LABEL
%%   proof=none|PROOF
%%   prooftype=TYPE
%%   prooflabel=none|LABEL
\subcommand\endprop[:def]{}
\subcommand\prop[:def]{\@ifnextchar[%]
  {\@prop@def}{\@prop@def[def]}}
\gdef\@prop@def[#1]{\@@prop[def,#1]}

%% \begin{prop:proof}[NAME|OPTIONS]{ID}
%%   ...
%% \end{prop:proof}
%%
%% [OPTIONS]
%%   def
%%   name=NAME
%%   type=TYPE
%%   label=none|LABEL
\subcommand\endprop[:proof]{}
\subcommand\prop[:proof]{\@ifnextchar[%]
  {\@@prop@proof}{\@@prop@proof[]}}
\gdef\@@prop@proof[#1]#2{%
  \let\prop@o@def=\relax%
  \edef\prop@o@name{default}%
  \edef\prop@o@type{\prop@c@proof}%
  \edef\prop@o@label{proof:#2}%
  \prop@opt@parse{#1}%
  \prop@opt@def{#2}{proof}{\prop@o@name}%
  \prop@opt@def{#2}{prooftype}{\prop@o@type}%
  \prop@opt@def{#2}{prooflabel}{\prop@o@label}%
  \edef\prop@id{#2}%
  \prop@collect@body\@@@prop@proof}
\gdef\@@@prop@proof#1{%
  \expandafter\@prop@proof\expandafter[\prop@o@name]%
  #1\proof\relax\prop@proofend%
  \ifx\prop@o@def\relax%
  \expandafter\prop@use@proof\expandafter[\prop@o@name]{\prop@id}\else\fi}

%% \begin{statements}[STYLE|OPTIONS]
%% \item(NAME)
%%   ...
%% \item[MARKER](NAME)
%%   ...
%% \end{statements}
%%
%% [OPTIONS]
%%   type=TYPE
%%   style=STYLE
\gdef\prop@def@stat{%
  \def\statements{\@ifnextchar[%]
    {\@statements}{\@statements[]}}%
  \def\endstatements{\end{\prop@o@type}}%
  \def\@statements[##1]{%
    \let\@prop@item=\item%
    \def\@prop@item@name(####1){\@prop@item%
      \ifx\prop@o@label\prop@opt@none\else\@@prop@label{####1}\fi}%
    \def\@prop@item@name@[####1](####2){\@prop@item[####1]%
      \ifx\prop@o@label\prop@opt@none\else%
        \@@prop@label@[\bgroup{####1}\egroup]{####2}\fi}%
    \def\@prop@item@[####1]{\@ifnextchar(%)
      {\@prop@item@name@[####1]}{\@prop@item[####1]}}%
    \def\@@prop@label####1{\@@prop@label@[\prop@o@style]{####1}}%
    \def\@@prop@label@[####1]####2{\prop@label[####1]{\prop@o@label(####2)}}%
    \def\item{\@ifnextchar[%]
      {\@prop@item@}{\@ifnextchar(%)
        {\@prop@item@name}{\@prop@item}}}%
    \def\@prop@stat@opt{}%
    % get options
    \let\prop@o@name\relax%
    \edef\prop@o@type{\prop@c@enumerate}%
    \edef\prop@o@style{\prop@c@enumerate@style}%
    \prop@opt@parse@name{##1}%
    \ifx\prop@o@name\relax\else\edef\prop@o@style{\prop@o@name}\fi%
    % set label length
    \advance\@enumdepth\@ne%
    \edef\@enumctr{enum\romannumeral\the\@enumdepth}%
    \@enLab{}\let\@enThe=\@enQmark%
    \expandafter\@enloop\prop@o@style\@enum@%
    \csname c@\@enumctr\endcsname7%
    \expandafter\settowidth%
    \csname leftmargin\romannumeral\@enumdepth\endcsname%
    {\the\@enLab\hspace{\labelsep}}%
    \advance\@enumdepth\m@ne%
    % enumerate
    \begin{\prop@o@type}%
    \expandafter\edef\csname label\@enumctr\endcsname{\the\@enLab}%
    \expandafter\let\csname the\@enumctr\endcsname=\@enThe}}

%% End of definitons *******************************************


\if@prop@ntheorem
  %% Do not load standard config file
  \if@prop@noconfig{\endinput}\else{%
    \if@prop@amsthm{%
      \if@prop@standard\else{\endinput}\fi
    }\else{\endinput}\fi
  }\fi

  %% Define keyword for predefined environment
  \@ifundefined{proofKeyword}{\gdef\proofKeyword{Proof}}{}

  %% Load standard config file
  \let\newtheorem=\deftheorem % allow redefinition
  \InputIfFileExists{ntheorem.std}%
  {\PackageInfo{\base@name}{Standard config file ntheorem.std used}}{}
  \let\newtheorem=\prop@newtheorem
\fi

\endinput
%%
%% End of file `prop.sty'
